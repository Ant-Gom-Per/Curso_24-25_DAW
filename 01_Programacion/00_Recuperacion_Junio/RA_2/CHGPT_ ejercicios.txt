Aqu√≠ tienes **tres ejercicios sencillos** de **programaci√≥n modular en Java**, cada uno con su respectiva soluci√≥n. 
La **programaci√≥n modular** se basa en dividir el c√≥digo en m√©todos reutilizables para mejorar la organizaci√≥n y la legibilidad.

### **Ejercicio 1: Calcular el √°rea de un rect√°ngulo**
**Descripci√≥n:**  
Crea un programa que solicite la base y la altura de un rect√°ngulo, y luego calcule su √°rea usando un m√©todo separado.

#### **Soluci√≥n:**

import java.util.Scanner;

public class AreaRectangulo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Ingrese la base del rect√°ngulo: ");
        double base = scanner.nextDouble();

        System.out.print("Ingrese la altura del rect√°ngulo: ");
        double altura = scanner.nextDouble();

        double area = calcularArea(base, altura); // Llamada al m√©todo modular
        System.out.println("El √°rea del rect√°ngulo es: " + area);

        scanner.close();
    }

    public static double calcularArea(double base, double altura) {
        return base * altura;
    }
}
```
‚úÖ **Explicaci√≥n:**  
- Se crea un m√©todo `calcularArea(double base, double altura)` que encapsula la l√≥gica de c√°lculo.  
- `main()` se encarga solo de recibir datos e imprimir resultados.

------------------------------------------------------------------------------------------

### **Ejercicio 2: Determinar si un n√∫mero es par o impar**
**Descripci√≥n:**  
Escribe un programa que solicite un n√∫mero entero y determine si es **par** o **impar** utilizando un m√©todo.

#### **Soluci√≥n:**

import java.util.Scanner;

public class NumeroParImpar {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Ingrese un n√∫mero entero: ");
        int numero = scanner.nextInt();

        if (esPar(numero)) { // Llamada a la funci√≥n modular
            System.out.println("El n√∫mero " + numero + " es par.");
        } else {
            System.out.println("El n√∫mero " + numero + " es impar.");
        }

        scanner.close();
    }

    public static boolean esPar(int num) {
        return num % 2 == 0;
    }
}
```
‚úÖ **Explicaci√≥n:**  
- Se crea el m√©todo `esPar(int num)`, que devuelve `true` si el n√∫mero es par y `false` si es impar.  
- `main()` simplemente obtiene el n√∫mero, llama al m√©todo y muestra el resultado.

--------------------------------------------------------------------------------------------

### **Ejercicio 3: Calcular el factorial de un n√∫mero**
**Descripci√≥n:**  
Haz un programa que solicite un n√∫mero entero positivo y calcule su **factorial** utilizando un m√©todo separado.

#### **Soluci√≥n:**

import java.util.Scanner;

public class Factorial {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Ingrese un n√∫mero entero positivo: ");
        int numero = scanner.nextInt();

        if (numero < 0) {
            System.out.println("El n√∫mero debe ser positivo.");
        } else {
            long resultado = calcularFactorial(numero); // Llamada a la funci√≥n modular
            System.out.println("El factorial de " + numero + " es: " + resultado);
        }

        scanner.close();
    }

    public static long calcularFactorial(int num) {
        long factorial = 1;
        for (int i = 1; i <= num; i++) {
            factorial *= i;
        }
        return factorial;
    }
}
```
‚úÖ **Explicaci√≥n:**  
- `calcularFactorial(int num)` usa un bucle `for` para calcular el factorial.  
- `main()` maneja la entrada del usuario y las validaciones.

-----------------------------------------------------------------------------------

### üìå **Resumen:**
| Ejercicio             | M√©todo Modular                             |
|-----------            |--------------------------------------------|
| √Årea de un rect√°ngulo | `calcularArea(double base, double altura)` |
| N√∫mero par o impar    | `esPar(int num)`                           |
| Factorial de un n√∫mero| `calcularFactorial(int num)`               |

Estos ejercicios demuestran la importancia de la **modularidad**, mejorando la **reutilizaci√≥n** y la **legibilidad** del c√≥digo. üöÄ  
